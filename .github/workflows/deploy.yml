name: deploy

on:
  workflow_dispatch:
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR Repository
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            aws ecr create-repository --repository-name health-check-app

      - name: Docker buid Image
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker build -t health-check-app .
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/health-check-app:latest
            docker tag health-check-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/health-check-app:latest

      - name: update task-definition
        run: |
            export IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/health-check-app:latest"
            jq -i ".containerDefinitions[0].image = \"$IMAGE\"" ./task-definition.json

            export ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
            jq -i ".executionRoleArn = \"$ROLE_ARN\"" ./task-definition.json

      - name: create task-definition
        run: |
            aws ecs register-task-definition --cli-input-json file://./task-definition.json
            aws ecs create-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service-name health-check-app-service --task-definition health-check-app-task --desired-count 1 --launch-type FARGATE --network-configuration file://./awsvpc.json
